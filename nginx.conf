# Run nginx using:
#     nginx -p $PWD -e stderr -c nginx.conf

# а пахне як

events {}

pid nginx.pid;

http {
    include       mime.types;
    default_type  application/octet-stream;

    # types {
    #     text/html               html;
    #     text/css                css;
    #     application/javascript  js;
    #     text/javascript         js; 
    #     # Добавьте другие MIME-типы по необходимости
    # }

    # Логирование CORS ошибок (опционально)
    log_format cors '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_origin" "$http_user_agent"';

    access_log /dev/stdout cors;

    map $http_origin $cors_header {
        default "";
        "~*https?://(localhost:.*|hackatonsite\.jumpingcrab\.com)" $http_origin;
    }


    types {
        text/html               html;
        text/css                css;
        application/javascript  js;
        text/javascript         js; 
    }

    # Directories nginx needs configured to start up.
    client_body_temp_path .;
    proxy_temp_path .;
    fastcgi_temp_path .;
    uwsgi_temp_path .;
    scgi_temp_path .;

    server {
        listen 80;
        server_name hackatonsite.jumpingcrab.com;
        
        location / {
            if ($request_method = GET) {
                rewrite  ^ https://$host$request_uri? permanent;
            }
            return 405;
        }
    }

    server {
        listen 443 ssl;
        server_name hackatonsite.jumpingcrab.com;

        ssl_certificate /etc/letsencrypt/live/hackatonsite.jumpingcrab.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/hackatonsite.jumpingcrab.com/privkey.pem;

        root /var/www/html;

        # Global CORS headers
        add_header 'Access-Control-Allow-Origin' $cors_header always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        #backend
        location /api/ {
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://hackatonsite.jumpingcrab.com:18000/;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = OPTIONS) {
                return 204;
            }
        }
        # static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff2)$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header Cache-Control "public, max-age=31536000, immutable";
            try_files $uri =404;
            
            # Отключать обработку SPA для статики
            error_page 404 = @spa;
        }


        # 3. Основной location
        location / {
            try_files $uri $uri/ @spa;
        }

        # 4. Для Yandex OAuth
        location = /suggest/ya-token {
            add_header 'Access-Control-Expose-Headers' 'Authorization' always;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            add_header Pragma "no-cache";
            try_files $uri @spa;
        }

        location @spa {
            try_files /index.html =404;
        }
    }
}